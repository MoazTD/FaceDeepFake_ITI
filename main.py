import sys
from pathlib import Path
from PySide6.QtWidgets import QApplication, QFileDialog, QMessageBox
from PySide6.QtCore import QTimer
import json
import os
from ui.uitls import logger
from PySide6.QtCore import QCoreApplication


try:
    from ui.main_window import Ui_MainWindow
except ImportError as e:
    print(f"Error: Could not import Ui_MainWindow from ui.main_window: {e}")
    print("Please ensure 'main_window.py' (generated by pyside6-uic) is in the 'ui' directory.")
    sys.exit(1)

def safe_import_enhanced_main_window():
    """Safely import EnhancedMainWindow with error handling"""
    try:
        from ui.ui_logic import EnhancedMainWindow
        return EnhancedMainWindow
    except ImportError as e:
        print(f"Import error: Failed to import EnhancedMainWindow from ui.ui_logic: {e}")
        try:
            from core.requirements_checker import RequirementsChecker, Colors
            print(f"RequirementsChecker imported successfully")
        except ImportError as req_error:
            print(f"RequirementsChecker import failed: {req_error}")
        
        raise ImportError(f"Failed to import EnhancedMainWindow: {e}")

def show_splash_and_main():
    """Show splash screen and then main window"""
    
    
    global main_window

    
    try:
        from ui.Splash_Screen import GifSplashScreen
        gif_path = Path("C:\\Users\\ROG\\Downloads\\New folder (4)\\Assets\\Gif\\Face Detection.gif")

        if gif_path.exists():
            print("Loading splash screen...")
            splash = GifSplashScreen(str(gif_path), duration=3000)
            splash.show()
            # app.processEvents()
            
            def show_main_window_after_splash():
                try:
                    print("Initializing main window...")
                    EnhancedMainWindow = safe_import_enhanced_main_window()
                    main_window = EnhancedMainWindow() 
                    main_window.show()
                    splash.close()
                    print("Application ready!")
                except Exception as e:
                    print(f"Error initializing main window: {e}")
                    QMessageBox.critical(None, "Application Error", f"Failed to initialize main window: {e}")
                    splash.close()
                    sys.exit(1)
                
            QTimer.singleShot(3000, show_main_window_after_splash)
        else:
            print("Splash screen file not found, starting directly...")
            EnhancedMainWindow = safe_import_enhanced_main_window()
            main_window = EnhancedMainWindow() 
            main_window.show()
            
    except ImportError as e:
        print(f"Splash screen module not available: {e}")
        print("Starting main application directly without splash screen...")
        EnhancedMainWindow = safe_import_enhanced_main_window()

        main_window = EnhancedMainWindow() 
        main_window.show()
    except Exception as e:
        print(f"Error with splash screen: {e}")
        print("Starting main application directly without splash screen due to error...")
        EnhancedMainWindow = safe_import_enhanced_main_window()
        main_window = EnhancedMainWindow() 
        main_window.show()

def main():
    """Main entry point for the application"""
    global app, main_window
    app = QApplication(sys.argv)
    main_window = None
    
    print("Face Swapping Application Starting...")
    
    try:
        from core.requirements_checker import RequirementsChecker, Colors
        print("Checking requirements...")
        checker = RequirementsChecker()
        success = checker.run_checks(auto_install=False)
        
        if not success:
            print("Cannot start application: requirements not satisfied.")
            print("Run 'python requirements_checker.py --auto-install' to install missing dependencies.")
            QMessageBox.critical(None, "Requirements Not Met", 
                                 "Application cannot start. Please install missing dependencies. "
                                 "Check console for details.")
            return 1
        
        print("All requirements satisfied. Starting application...")
    except ImportError as e:
        print(f"Warning: Could not check requirements (module not found): {e}")
        print("Proceeding anyway, but application might not function correctly.")
    except Exception as e:
        print(f"Warning: An unexpected error occurred during requirements check: {e}")
        print("Proceeding anyway, but application might not function correctly.")
    
    try:
        show_splash_and_main()
        return app.exec()
    except Exception as e:
        print(f"Critical error starting application: {e}")
        QMessageBox.critical(None, "Critical Application Error", f"An unhandled error occurred: {e}")
        return 1

def exception_hook(exctype, value, traceback):

    print(exctype, value, traceback)
    
    if "QBackingStore::endPaint()" in str(value):
        print("QPainter cleanup error detected. Attempting to force cleanup...")
        # if QApplication.instance():
        #     QApplication.instance().processEvents()
    
    sys.__excepthook__(exctype, value, traceback)
    QCoreApplication.quit()

sys.excepthook = exception_hook

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        sys.exit(0)
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        sys.exit(1)